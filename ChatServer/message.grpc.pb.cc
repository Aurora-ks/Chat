// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace message {

static const char* Varify_method_names[] = {
  "/message.Varify/GetVarifyCode",
};

std::unique_ptr< Varify::Stub> Varify::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Varify::Stub> stub(new Varify::Stub(channel));
  return stub;
}

Varify::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetVarifyCode_(Varify_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Varify::Stub::GetVarifyCode(::grpc::ClientContext* context, const ::message::VarifyReq& request, ::message::VarifyRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::message::VarifyReq, ::message::VarifyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVarifyCode_, context, request, response);
}

void Varify::Stub::experimental_async::GetVarifyCode(::grpc::ClientContext* context, const ::message::VarifyReq* request, ::message::VarifyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::message::VarifyReq, ::message::VarifyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVarifyCode_, context, request, response, std::move(f));
}

void Varify::Stub::experimental_async::GetVarifyCode(::grpc::ClientContext* context, const ::message::VarifyReq* request, ::message::VarifyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVarifyCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::message::VarifyRes>* Varify::Stub::PrepareAsyncGetVarifyCodeRaw(::grpc::ClientContext* context, const ::message::VarifyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::message::VarifyRes, ::message::VarifyReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVarifyCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::message::VarifyRes>* Varify::Stub::AsyncGetVarifyCodeRaw(::grpc::ClientContext* context, const ::message::VarifyReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVarifyCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

Varify::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Varify_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Varify::Service, ::message::VarifyReq, ::message::VarifyRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Varify::Service* service,
             ::grpc::ServerContext* ctx,
             const ::message::VarifyReq* req,
             ::message::VarifyRes* resp) {
               return service->GetVarifyCode(ctx, req, resp);
             }, this)));
}

Varify::Service::~Service() {
}

::grpc::Status Varify::Service::GetVarifyCode(::grpc::ServerContext* context, const ::message::VarifyReq* request, ::message::VarifyRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace message

